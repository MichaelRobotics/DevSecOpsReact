name: Platform Deployment

on:
#  push:
#    branches: [ main ]
#    paths:
#      - 'helmfile.yaml'
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        default: 'DevSecOpsReact'
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'

env:
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name || 'DevSecOpsReact' }}
  AWS_REGION: ${{ github.event.inputs.aws_region || 'us-west-2' }}

jobs:
  deploy-platform:
    name: Deploy Platform Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
      
      - name: Install Helmfile
        run: |
          curl -L https://github.com/helmfile/helmfile/releases/download/v0.167.1/helmfile_0.167.1_linux_amd64.tar.gz | tar xz
          sudo mv helmfile /usr/local/bin/
      
      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
          kubectl get nodes -o wide
      
      - name: Set up Docker Hub Secret
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          chmod +x ./scripts/create-dockerhub-secret.sh
          ./scripts/create-dockerhub-secret.sh
      
      - name: Deploy Platform Components with Helmfile
        run: |
          helmfile sync
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
          kubectl wait --for=condition=available --timeout=300s deployment/monitoring-grafana -n monitoring
          echo "ArgoCD admin password: $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)"
      
      - name: Display LoadBalancer Access URLs
        run: |
          echo "=== LoadBalancer Access URLs ==="
          sleep 60
          ARGOCD_LB=$(kubectl get svc -n argocd argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "✅ ArgoCD UI: https://$ARGOCD_LB:8443"
          GRAFANA_LB=$(kubectl get svc -n monitoring monitoring-grafana -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "✅ Grafana: http://$GRAFANA_LB"
          PROMETHEUS_LB=$(kubectl get svc -n monitoring statefulset/prometheus-monitoring-kube-prometheus-prometheus -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "✅ Prometheus: http://$PROMETHEUS_LB:9090"